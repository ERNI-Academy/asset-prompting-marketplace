name: Issue to PR Automation

on:
  issues:
    types: [opened]

jobs:
  create_pr:
    if: contains( toJson( github.event.issue.labels ), '"prompt"' )
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Git Config
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Extract Issue Data
        id: extract_data
        uses: actions/github-script@v6
        with:
          script: |
            const issueBody = `\n${{ github.event.issue.body }}`;
            const fs = require('fs');

            // Write issue body to file
            fs.writeFileSync('issue_body.txt', issueBody);

            // Split issue body into lines
            const lines = issueBody.split('\n');

            function extractSection(header) {
              const sectionLines = [];
              let inSection = false;

              for (const line of lines) {
                if (line.trim() === `### ${header}`) {
                  inSection = true;
                  continue;
                }
                if (inSection && line.startsWith('### ')) {
                  break;
                }
                if (inSection) {
                  sectionLines.push(line);
                }
              }
              return sectionLines.join('\n').trim();
            }

            const promptName = `${{ github.event.issue.title }}`;
            const author = extractSection('Author');
            const tags = extractSection('Tags');
            const promptContent = extractSection('Prompt');

            // Set environment variables
            fs.appendFileSync(process.env.GITHUB_ENV, `PROMPT_NAME=${promptName}\n`);
            fs.appendFileSync(process.env.GITHUB_ENV, `AUTHOR=${author}\n`);
            fs.appendFileSync(process.env.GITHUB_ENV, `TAGS=${tags}\n`);

            // Handle multi-line environment variable
            fs.appendFileSync(process.env.GITHUB_ENV, `PROMPT_CONTENT<<EOF\n${promptContent}\nEOF\n`);

      - name: Debug Extracted Data
        run: |
          echo "Prompt Name: $PROMPT_NAME"
          echo "Author: $AUTHOR"
          echo "Tags: $TAGS"
          echo "Prompt Content:"
          echo "$PROMPT_CONTENT"

      - name: Create Branch
        id: branch_name
        run: |
          BRANCH_NAME="issue-${{ github.event.issue.number }}"
          echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT
          git checkout -b "$BRANCH_NAME"

      - name: Create File from Issue
        run: |
          # Sanitize prompt name to create a valid file name
          FILE_NAME="$(echo "$PROMPT_NAME" | tr '[:upper:]' '[:lower:]' \
            | sed -E 's/[^a-z0-9]+/-/g; s/^-+|-+$//g')"
          FILE_PATH="aida-prompts/_prompts/${FILE_NAME}.md"

          echo "Creating file at $FILE_PATH"

          mkdir -p "$(dirname "$FILE_PATH")"

          # Use printf to write to the file
          printf '%s\n' \
            '---' \
            "title: \"$PROMPT_NAME\"" \
            "author: \"$AUTHOR\"" \
            "tags: [$TAGS]" \
            '---' \
            '' \
            "$PROMPT_CONTENT" \
            > "$FILE_PATH"

          git add "$FILE_PATH"
          git commit -m "Add prompt '$PROMPT_NAME' from Issue #${{ github.event.issue.number }}"

      - name: Push Branch
        run: |
          git push origin HEAD

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ steps.branch_name.outputs.branch }}
          base: main
          title: "Add Prompt: $PROMPT_NAME"
          body: |
            Adds a new prompt from Issue #${{ github.event.issue.number }}.
            Automatically generated by GitHub Actions.
